package com.sogou.ai_show_room.human_body; /**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-01-16")
public class PeopleTrack implements org.apache.thrift.TBase<PeopleTrack, PeopleTrack._Fields>, java.io.Serializable, Cloneable, Comparable<PeopleTrack> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PeopleTrack");

  private static final org.apache.thrift.protocol.TField PEOPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("people_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CURRENT_POS_FIELD_DESC = new org.apache.thrift.protocol.TField("current_pos", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PeopleTrackStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PeopleTrackTupleSchemeFactory());
  }

  public String people_id; // required
  public Track_Point3D current_pos; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PEOPLE_ID((short)1, "people_id"),
    CURRENT_POS((short)2, "current_pos");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PEOPLE_ID
          return PEOPLE_ID;
        case 2: // CURRENT_POS
          return CURRENT_POS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PEOPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("people_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENT_POS, new org.apache.thrift.meta_data.FieldMetaData("current_pos", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Track_Point3D.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PeopleTrack.class, metaDataMap);
  }

  public PeopleTrack() {
  }

  public PeopleTrack(
    String people_id,
    Track_Point3D current_pos)
  {
    this();
    this.people_id = people_id;
    this.current_pos = current_pos;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PeopleTrack(PeopleTrack other) {
    if (other.isSetPeople_id()) {
      this.people_id = other.people_id;
    }
    if (other.isSetCurrent_pos()) {
      this.current_pos = new Track_Point3D(other.current_pos);
    }
  }

  public PeopleTrack deepCopy() {
    return new PeopleTrack(this);
  }

  @Override
  public void clear() {
    this.people_id = null;
    this.current_pos = null;
  }

  public String getPeople_id() {
    return this.people_id;
  }

  public PeopleTrack setPeople_id(String people_id) {
    this.people_id = people_id;
    return this;
  }

  public void unsetPeople_id() {
    this.people_id = null;
  }

  /** Returns true if field people_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPeople_id() {
    return this.people_id != null;
  }

  public void setPeople_idIsSet(boolean value) {
    if (!value) {
      this.people_id = null;
    }
  }

  public Track_Point3D getCurrent_pos() {
    return this.current_pos;
  }

  public PeopleTrack setCurrent_pos(Track_Point3D current_pos) {
    this.current_pos = current_pos;
    return this;
  }

  public void unsetCurrent_pos() {
    this.current_pos = null;
  }

  /** Returns true if field current_pos is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrent_pos() {
    return this.current_pos != null;
  }

  public void setCurrent_posIsSet(boolean value) {
    if (!value) {
      this.current_pos = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PEOPLE_ID:
      if (value == null) {
        unsetPeople_id();
      } else {
        setPeople_id((String)value);
      }
      break;

    case CURRENT_POS:
      if (value == null) {
        unsetCurrent_pos();
      } else {
        setCurrent_pos((Track_Point3D)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PEOPLE_ID:
      return getPeople_id();

    case CURRENT_POS:
      return getCurrent_pos();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PEOPLE_ID:
      return isSetPeople_id();
    case CURRENT_POS:
      return isSetCurrent_pos();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PeopleTrack)
      return this.equals((PeopleTrack)that);
    return false;
  }

  public boolean equals(PeopleTrack that) {
    if (that == null)
      return false;

    boolean this_present_people_id = true && this.isSetPeople_id();
    boolean that_present_people_id = true && that.isSetPeople_id();
    if (this_present_people_id || that_present_people_id) {
      if (!(this_present_people_id && that_present_people_id))
        return false;
      if (!this.people_id.equals(that.people_id))
        return false;
    }

    boolean this_present_current_pos = true && this.isSetCurrent_pos();
    boolean that_present_current_pos = true && that.isSetCurrent_pos();
    if (this_present_current_pos || that_present_current_pos) {
      if (!(this_present_current_pos && that_present_current_pos))
        return false;
      if (!this.current_pos.equals(that.current_pos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_people_id = true && (isSetPeople_id());
    list.add(present_people_id);
    if (present_people_id)
      list.add(people_id);

    boolean present_current_pos = true && (isSetCurrent_pos());
    list.add(present_current_pos);
    if (present_current_pos)
      list.add(current_pos);

    return list.hashCode();
  }

  @Override
  public int compareTo(PeopleTrack other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPeople_id()).compareTo(other.isSetPeople_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPeople_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.people_id, other.people_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrent_pos()).compareTo(other.isSetCurrent_pos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrent_pos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current_pos, other.current_pos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PeopleTrack(");
    boolean first = true;

    sb.append("people_id:");
    if (this.people_id == null) {
      sb.append("null");
    } else {
      sb.append(this.people_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("current_pos:");
    if (this.current_pos == null) {
      sb.append("null");
    } else {
      sb.append(this.current_pos);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (people_id == null) {
      throw new TProtocolException("Required field 'people_id' was not present! Struct: " + toString());
    }
    if (current_pos == null) {
      throw new TProtocolException("Required field 'current_pos' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (current_pos != null) {
      current_pos.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PeopleTrackStandardSchemeFactory implements SchemeFactory {
    public PeopleTrackStandardScheme getScheme() {
      return new PeopleTrackStandardScheme();
    }
  }

  private static class PeopleTrackStandardScheme extends StandardScheme<PeopleTrack> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PeopleTrack struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PEOPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.people_id = iprot.readString();
              struct.setPeople_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURRENT_POS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.current_pos = new Track_Point3D();
              struct.current_pos.read(iprot);
              struct.setCurrent_posIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PeopleTrack struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.people_id != null) {
        oprot.writeFieldBegin(PEOPLE_ID_FIELD_DESC);
        oprot.writeString(struct.people_id);
        oprot.writeFieldEnd();
      }
      if (struct.current_pos != null) {
        oprot.writeFieldBegin(CURRENT_POS_FIELD_DESC);
        struct.current_pos.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PeopleTrackTupleSchemeFactory implements SchemeFactory {
    public PeopleTrackTupleScheme getScheme() {
      return new PeopleTrackTupleScheme();
    }
  }

  private static class PeopleTrackTupleScheme extends TupleScheme<PeopleTrack> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PeopleTrack struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.people_id);
      struct.current_pos.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PeopleTrack struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.people_id = iprot.readString();
      struct.setPeople_idIsSet(true);
      struct.current_pos = new Track_Point3D();
      struct.current_pos.read(iprot);
      struct.setCurrent_posIsSet(true);
    }
  }

}

